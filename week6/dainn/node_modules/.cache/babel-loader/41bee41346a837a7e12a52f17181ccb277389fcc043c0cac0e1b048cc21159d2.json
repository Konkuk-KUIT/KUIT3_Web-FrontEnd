{"ast":null,"code":"var _jsxFileName = \"/Users/dainn/KUIT3_Web-FrontEnd/week6/dainn/src/components/ProductTable.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport React, { Fragment } from 'react';\nimport ProductCategoryRow from './ProductCategoryRow';\nimport ProductRow from './ProductRow';\n\n// GroupedProducts interface 추가\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductTable = ({\n  products,\n  filterText,\n  inStockOnly\n}) => {\n  _s();\n  const [number, setNumber] = useState(-1);\n\n  // const deleteId = (number) => {\n  //   setNumber(number);\n  // }\n\n  // rows와 lastCategory는 사용하지 않으므로 선언x\n\n  // 기존에는 filteredProducts 하나만 있었는데\n  // filterdProducts -> filteredProducts와 groupedProductsByCategory로 분리\n\n  // filteredProducts는 필터링만 하는 함수\n  // inStockOnly -> 재고 여부 | filterText -> 검색어\n  const filteredProducts = products.filter(product => (!inStockOnly || product.stocked) && product.name.toLowerCase().includes(filterText.toLowerCase()));\n  const deleteProduct = deleteId => {\n    console.log(\"deletedID: \", deleteId);\n    console.log(products.length);\n    const deletedProducts = filteredProducts.filter(filteredProduct => filteredProduct.id !== deleteId);\n    deletedProducts.map(deletedProduct => {\n      console.log(deletedProduct.name);\n    });\n    return deletedProducts;\n  };\n\n  // groupedProductsByCategory는 위의 filteredProducts에서 필터링된 제품들을\n  // 카테고리를 기준으로 그룹화해주는 함수\n\n  // Object.values -> 특정 객체를 대상으로 value값들만 뽑아서 배열로 반환하는 메서드\n  const groupedProductsByCategory = Object.values(\n  // acc: 누적값, product: 현재 처리 중인 상품\n  filteredProducts.reduce((acc, product) => {\n    const {\n      category\n    } = product;\n\n    // acc 객체에 category 속성이 이미 있는지 확인\n    // category 속성이 없다면, 새로운 { category, products: [] } 객체를 생성하여 acc[category]에 할당\n    acc[category] = acc[category] || {\n      category,\n      products: []\n    };\n\n    // 현재 처리 중인 상품 product를 해당 카테고리의 products 배열에 추가\n    acc[category].products.push(product);\n    return acc;\n\n    // reduce 함수의 두 번째 인자는 acc의 초기값\n    // -> 빈 객체 {}를 acc의 초기값으로 설정하고\n    // 이 객체의 타입을 { [category: string]: GroupedProducts }로 지정\n    // 각 카테고리 이름을 키로 가지고, 그 값으로 GroupedProducts 타입의 객체를 가지는 객체를 의미\n  }, {}));\n\n  // setProducts((previousData: Products[]) => [...previousData, newProduct]);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: groupedProductsByCategory.map(productCategory => {\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ProductCategoryRow, {\n            category: productCategory.category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), productCategory.products.map(product => /*#__PURE__*/_jsxDEV(ProductRow, {\n            product: product,\n            deleteProduct: deleteProduct\n          }, product.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this))]\n        }, productCategory.category, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductTable, \"86XozGAP3e7hM2duwZF//8iovvs=\");\n_c = ProductTable;\nexport default ProductTable;\nvar _c;\n$RefreshReg$(_c, \"ProductTable\");","map":{"version":3,"names":["useState","React","Fragment","ProductCategoryRow","ProductRow","jsxDEV","_jsxDEV","ProductTable","products","filterText","inStockOnly","_s","number","setNumber","filteredProducts","filter","product","stocked","name","toLowerCase","includes","deleteProduct","deleteId","console","log","length","deletedProducts","filteredProduct","id","map","deletedProduct","groupedProductsByCategory","Object","values","reduce","acc","category","push","children","fileName","_jsxFileName","lineNumber","columnNumber","productCategory","_c","$RefreshReg$"],"sources":["/Users/dainn/KUIT3_Web-FrontEnd/week6/dainn/src/components/ProductTable.tsx"],"sourcesContent":["import { useState } from 'react';\nimport React, { Fragment } from 'react';\nimport { Products } from '../App';\nimport ProductCategoryRow from './ProductCategoryRow';\nimport ProductRow from './ProductRow';\n\n// GroupedProducts interface 추가\ninterface GroupedProducts {\n  category: string;\n  products: Products[];\n}\n\ninterface Props {\n  products: Products[];\n  filterText: string;\n  inStockOnly: boolean;\n}\n\nconst ProductTable: React.FC<Props> = ({\n  products,\n  filterText,\n  inStockOnly,\n}) => {\n\n  const [number, setNumber] = useState(-1)\n\n  // const deleteId = (number) => {\n  //   setNumber(number);\n  // }\n\n  // rows와 lastCategory는 사용하지 않으므로 선언x\n\n  // 기존에는 filteredProducts 하나만 있었는데\n  // filterdProducts -> filteredProducts와 groupedProductsByCategory로 분리\n\n  // filteredProducts는 필터링만 하는 함수\n  // inStockOnly -> 재고 여부 | filterText -> 검색어\n  const filteredProducts = products.filter(\n    (product) =>\n      (!inStockOnly || product.stocked) &&\n      product.name.toLowerCase().includes(filterText.toLowerCase())\n  );\n\n  const deleteProduct = (deleteId: string) => {\n    console.log(\"deletedID: \",deleteId);\n    console.log(products.length);\n    const deletedProducts = filteredProducts.filter(\n      (filteredProduct) => (filteredProduct.id !== deleteId)\n    );\n\n    deletedProducts.map((deletedProduct) => {\n      console.log(deletedProduct.name)\n    })\n\n    return deletedProducts;\n  };\n\n\n  // groupedProductsByCategory는 위의 filteredProducts에서 필터링된 제품들을\n  // 카테고리를 기준으로 그룹화해주는 함수\n\n  // Object.values -> 특정 객체를 대상으로 value값들만 뽑아서 배열로 반환하는 메서드\n  const groupedProductsByCategory = Object.values(\n    // acc: 누적값, product: 현재 처리 중인 상품\n    filteredProducts.reduce((acc, product) => {\n      const { category } = product;\n\n      // acc 객체에 category 속성이 이미 있는지 확인\n      // category 속성이 없다면, 새로운 { category, products: [] } 객체를 생성하여 acc[category]에 할당\n      acc[category] = acc[category] || { category, products: [] };\n\n      // 현재 처리 중인 상품 product를 해당 카테고리의 products 배열에 추가\n      acc[category].products.push(product);\n\n      return acc;\n\n      // reduce 함수의 두 번째 인자는 acc의 초기값\n      // -> 빈 객체 {}를 acc의 초기값으로 설정하고\n      // 이 객체의 타입을 { [category: string]: GroupedProducts }로 지정\n      // 각 카테고리 이름을 키로 가지고, 그 값으로 GroupedProducts 타입의 객체를 가지는 객체를 의미\n    }, {} as { [category: string]: GroupedProducts })\n  );\n\n\n\n\n   // setProducts((previousData: Products[]) => [...previousData, newProduct]);\n // };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Price</th>\n        </tr>\n      </thead>\n      <tbody>\n        {/* 원래는 rows 라는 변수에 ReactElement가 배열로 들어가있었다.\n       -> view와 logic이 혼재되어 있어서 어떤 역할을 하는지 예측하기 어렵다 \n       \n       각 렌더 함수(return문) 위에서는 컴포넌트에 전달해줄 데이터를 가공하고\n       렌더 함수 안에서는 오로지 뷰와 관련된 코드를 작성하는 것으로 수정\n       */}\n        {groupedProductsByCategory.map((productCategory) => {\n          return (\n            <Fragment key={productCategory.category}>\n              <ProductCategoryRow category={productCategory.category} />\n              {productCategory.products.map((product) => (\n                <ProductRow key={product.id} product={product} deleteProduct={deleteProduct} />\n              ))}\n            </Fragment>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default ProductTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}